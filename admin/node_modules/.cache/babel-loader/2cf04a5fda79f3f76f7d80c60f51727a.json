{"ast":null,"code":"import { fetchUtils } from 'ra-core';\nexport default {\n  // called when the user attempts to log in\n  login: ({\n    username,\n    password\n  }) => {\n    const httpClient = fetchUtils.fetchJson;\n    const formData = new FormData();\n    formData.append('username', username);\n    formData.append('password', password);\n    const servicesHost = 'http://localhost:8082';\n    return httpClient(servicesHost + '/memberlogin', {\n      method: 'post',\n      body: JSON.stringify({\n        \"username\": username\n      })\n    }).then(function (res) {\n      const json = res.json;\n\n      if (json.memberId === username && json.memberPw === password) {\n        localStorage.setItem('username', username); // accept all username/password combinations\n\n        return Promise.resolve();\n      } else {\n        return Promise.reject();\n      }\n    });\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem('username');\n    return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: ({\n    status\n  }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem('username') ? Promise.resolve() : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve()\n};","map":{"version":3,"sources":["C:/Users/이병헌/Desktop/DeepProject/FrontEnd/admin/src/memberAuthProvider.js"],"names":["fetchUtils","login","username","password","httpClient","fetchJson","formData","FormData","append","servicesHost","method","body","JSON","stringify","then","res","json","memberId","memberPw","localStorage","setItem","Promise","resolve","reject","logout","removeItem","checkError","status","checkAuth","getItem","getPermissions"],"mappings":"AAAA,SAASA,UAAT,QAA2B,SAA3B;AAEA,eAAe;AACX;AACAC,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA4B;AAC/B,UAAMC,UAAU,GAAGJ,UAAU,CAACK,SAA9B;AACA,UAAMC,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,IAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BN,QAA5B;AACAI,IAAAA,QAAQ,CAACE,MAAT,CAAgB,UAAhB,EAA4BL,QAA5B;AACA,UAAMM,YAAY,GAAG,uBAArB;AACA,WAAOL,UAAU,CAACK,YAAY,GAAG,cAAhB,EAA+B;AAC5CC,MAAAA,MAAM,EAAG,MADmC;AAE5CC,MAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAe;AAAC,oBAAaX;AAAd,OAAf;AAFqC,KAA/B,CAAV,CAINY,IAJM,CAID,UAASC,GAAT,EAAa;AACf,YAAMC,IAAI,GAAGD,GAAG,CAACC,IAAjB;;AACA,UAAGA,IAAI,CAACC,QAAL,KAAkBf,QAAlB,IAA8Bc,IAAI,CAACE,QAAL,KAAkBf,QAAnD,EAA6D;AACzDgB,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiClB,QAAjC,EADyD,CAEzD;;AACA,eAAOmB,OAAO,CAACC,OAAR,EAAP;AACH,OAJD,MAIK;AACD,eAAOD,OAAO,CAACE,MAAR,EAAP;AACH;AACJ,KAbM,CAAP;AAcH,GAtBU;AAuBX;AACAC,EAAAA,MAAM,EAAE,MAAM;AACVL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACA,WAAOJ,OAAO,CAACC,OAAR,EAAP;AACH,GA3BU;AA4BX;AACAI,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACxB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCR,MAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACA,aAAOJ,OAAO,CAACE,MAAR,EAAP;AACH;;AACD,WAAOF,OAAO,CAACC,OAAR,EAAP;AACH,GAnCU;AAoCX;AACAM,EAAAA,SAAS,EAAE,MAAM;AACb,WAAOT,YAAY,CAACU,OAAb,CAAqB,UAArB,IACDR,OAAO,CAACC,OAAR,EADC,GAEDD,OAAO,CAACE,MAAR,EAFN;AAGH,GAzCU;AA0CX;AACAO,EAAAA,cAAc,EAAE,MAAMT,OAAO,CAACC,OAAR;AA3CX,CAAf","sourcesContent":["import { fetchUtils } from 'ra-core';\r\n\r\nexport default {\r\n    // called when the user attempts to log in\r\n    login: ({ username, password }) => {\r\n        const httpClient = fetchUtils.fetchJson;\r\n        const formData = new FormData();\r\n        formData.append('username', username);\r\n        formData.append('password', password);\r\n        const servicesHost = 'http://localhost:8082';\r\n        return httpClient(servicesHost + '/memberlogin',{\r\n            method : 'post',\r\n            body : JSON.stringify({\"username\" : username})\r\n        })\r\n        .then(function(res){\r\n            const json = res.json;\r\n            if(json.memberId === username && json.memberPw === password ){\r\n                localStorage.setItem('username', username);\r\n                // accept all username/password combinations\r\n                return Promise.resolve();\r\n            }else{\r\n                return Promise.reject();\r\n            }\r\n        })\r\n    }, \r\n    // called when the user clicks on the logout button\r\n    logout: () => {\r\n        localStorage.removeItem('username');\r\n        return Promise.resolve();\r\n    },\r\n    // called when the API returns an error\r\n    checkError: ({ status }) => {\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('username');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    // called when the user navigates to a new location, to check for authentication\r\n    checkAuth: () => {\r\n        return localStorage.getItem('username')\r\n            ? Promise.resolve()\r\n            : Promise.reject();\r\n    },\r\n    // called when the user navigates to a new location, to check for permissions / roles\r\n    getPermissions: () => Promise.resolve(),\r\n};"]},"metadata":{},"sourceType":"module"}