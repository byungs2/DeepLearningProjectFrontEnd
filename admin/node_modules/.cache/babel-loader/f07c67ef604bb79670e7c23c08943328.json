{"ast":null,"code":"import { fetchUtils } from \"react-admin\";\nimport jsonServerProvider from 'ra-data-json-server';\nconst servicesHost = 'http://localhost:8082';\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n    options.headers = new Headers({\n      Accept: 'application/json'\n    });\n  }\n\n  options.headers.set('Access-Control-Expose-Headers', 'X-Total-Count');\n  return fetchUtils.fetchJson(url, options);\n};\n\nconst dataProvider = jsonServerProvider(servicesHost, httpClient);\nconst dataProv = { ...dataProvider,\n  create: (resource, params) => {\n    if (resource !== 'posts' || !params.data.pictures) {\n      return dataProvider.update(resource, params);\n    }\n\n    const newPictures = params.data.pictures.filter(p => p.rawFile instanceof File);\n    const formerPictures = params.data.pictures.filter(p => !(p.rawFile instanceof File));\n    return Promise.all(newPictures.map(convertFileToBase64)).then(base64Pictures => base64Pictures.map(picture64 => ({\n      src: picture64,\n      title: `${params.data.title}`\n    }))).then(transformedNewPictures => dataProvider.update(resource, { ...params,\n      data: { ...params.data,\n        pictures: [...transformedNewPictures, ...formerPictures]\n      }\n    }));\n  }\n};\n\nconst convertFileToBase64 = file => new Promise((resolve, reject) => {\n  const reader = new FileReader();\n\n  reader.onload = () => resolve(reader.result);\n\n  reader.onerror = reject;\n  reader.readAsDataURL(file.rawFile);\n});\n\nexport default dataProv;","map":{"version":3,"sources":["C:/Users/이병헌/Desktop/Deep Project/FrontEnd/admin/src/dataProv.js"],"names":["fetchUtils","jsonServerProvider","servicesHost","httpClient","url","options","headers","Headers","Accept","set","fetchJson","dataProvider","dataProv","create","resource","params","data","pictures","update","newPictures","filter","p","rawFile","File","formerPictures","Promise","all","map","convertFileToBase64","then","base64Pictures","picture64","src","title","transformedNewPictures","file","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL"],"mappings":"AAAA,SAASA,UAAT,QAA2B,aAA3B;AACA,OAAOC,kBAAP,MAA+B,qBAA/B;AAEA,MAAMC,YAAY,GAAG,uBAArB;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,OAAO,GAAG,EAAhB,KAAuB;AACtC,MAAI,CAACA,OAAO,CAACC,OAAb,EAAsB;AAClBD,IAAAA,OAAO,CAACC,OAAR,GAAkB,IAAIC,OAAJ,CAAY;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAZ,CAAlB;AACH;;AACDH,EAAAA,OAAO,CAACC,OAAR,CAAgBG,GAAhB,CAAoB,+BAApB,EAAoD,eAApD;AACA,SAAOT,UAAU,CAACU,SAAX,CAAqBN,GAArB,EAA0BC,OAA1B,CAAP;AACH,CAND;;AAQA,MAAMM,YAAY,GAAGV,kBAAkB,CAACC,YAAD,EAAeC,UAAf,CAAvC;AAEA,MAAMS,QAAQ,GAAG,EACb,GAAGD,YADU;AAEbE,EAAAA,MAAM,EAAE,CAACC,QAAD,EAAWC,MAAX,KAAsB;AAC1B,QAAID,QAAQ,KAAK,OAAb,IAAwB,CAACC,MAAM,CAACC,IAAP,CAAYC,QAAzC,EAAmD;AAC/C,aAAON,YAAY,CAACO,MAAb,CAAoBJ,QAApB,EAA8BC,MAA9B,CAAP;AACH;;AACD,UAAMI,WAAW,GAAGJ,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBG,MAArB,CAChBC,CAAC,IAAIA,CAAC,CAACC,OAAF,YAAqBC,IADV,CAApB;AAGA,UAAMC,cAAc,GAAGT,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqBG,MAArB,CACnBC,CAAC,IAAI,EAAEA,CAAC,CAACC,OAAF,YAAqBC,IAAvB,CADc,CAAvB;AAIA,WAAOE,OAAO,CAACC,GAAR,CAAYP,WAAW,CAACQ,GAAZ,CAAgBC,mBAAhB,CAAZ,EACFC,IADE,CACGC,cAAc,IAChBA,cAAc,CAACH,GAAf,CAAmBI,SAAS,KAAK;AAC7BC,MAAAA,GAAG,EAAED,SADwB;AAE7BE,MAAAA,KAAK,EAAG,GAAElB,MAAM,CAACC,IAAP,CAAYiB,KAAM;AAFC,KAAL,CAA5B,CAFD,EAOFJ,IAPE,CAOGK,sBAAsB,IACxBvB,YAAY,CAACO,MAAb,CAAoBJ,QAApB,EAA8B,EAC1B,GAAGC,MADuB;AAE1BC,MAAAA,IAAI,EAAE,EACF,GAAGD,MAAM,CAACC,IADR;AAEFC,QAAAA,QAAQ,EAAE,CACN,GAAGiB,sBADG,EAEN,GAAGV,cAFG;AAFR;AAFoB,KAA9B,CARD,CAAP;AAmBH;AAhCY,CAAjB;;AAmCA,MAAMI,mBAAmB,GAAGO,IAAI,IAC5B,IAAIV,OAAJ,CAAY,CAACW,OAAD,EAAUC,MAAV,KAAqB;AAC7B,QAAMC,MAAM,GAAG,IAAIC,UAAJ,EAAf;;AACAD,EAAAA,MAAM,CAACE,MAAP,GAAgB,MAAMJ,OAAO,CAACE,MAAM,CAACG,MAAR,CAA7B;;AACAH,EAAAA,MAAM,CAACI,OAAP,GAAiBL,MAAjB;AAEAC,EAAAA,MAAM,CAACK,aAAP,CAAqBR,IAAI,CAACb,OAA1B;AACH,CAND,CADJ;;AAQA,eAAeV,QAAf","sourcesContent":["import { fetchUtils } from \"react-admin\";\r\nimport jsonServerProvider from 'ra-data-json-server';\r\n\r\nconst servicesHost = 'http://localhost:8082';\r\n\r\nconst httpClient = (url, options = {}) => {\r\n    if (!options.headers) {\r\n        options.headers = new Headers({ Accept: 'application/json' });\r\n    }\r\n    options.headers.set('Access-Control-Expose-Headers','X-Total-Count');\r\n    return fetchUtils.fetchJson(url, options);\r\n};\r\n\r\nconst dataProvider = jsonServerProvider(servicesHost, httpClient);\r\n\r\nconst dataProv = {\r\n    ...dataProvider,\r\n    create: (resource, params) => {\r\n        if (resource !== 'posts' || !params.data.pictures) {\r\n            return dataProvider.update(resource, params);\r\n        }\r\n        const newPictures = params.data.pictures.filter(\r\n            p => p.rawFile instanceof File\r\n        );\r\n        const formerPictures = params.data.pictures.filter(\r\n            p => !(p.rawFile instanceof File)\r\n        );\r\n\r\n        return Promise.all(newPictures.map(convertFileToBase64))\r\n            .then(base64Pictures =>\r\n                base64Pictures.map(picture64 => ({\r\n                    src: picture64,\r\n                    title: `${params.data.title}`,\r\n                }))\r\n            )\r\n            .then(transformedNewPictures =>\r\n                dataProvider.update(resource, {\r\n                    ...params,\r\n                    data: {\r\n                        ...params.data,\r\n                        pictures: [\r\n                            ...transformedNewPictures,\r\n                            ...formerPictures,\r\n                        ],\r\n                    },\r\n                })\r\n            );\r\n    },\r\n};\r\n\r\nconst convertFileToBase64 = file =>\r\n    new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n        reader.onload = () => resolve(reader.result);\r\n        reader.onerror = reject;\r\n\r\n        reader.readAsDataURL(file.rawFile);\r\n    });\r\nexport default dataProv;"]},"metadata":{},"sourceType":"module"}