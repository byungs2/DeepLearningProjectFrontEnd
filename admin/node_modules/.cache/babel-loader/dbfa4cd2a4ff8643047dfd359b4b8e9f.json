{"ast":null,"code":"export default {\n  // called when the user attempts to log in\n  login: ({\n    username,\n    password\n  }) => {\n    const servicesHost = 'http://localhost:8082';\n    fetch(servicesHost + '/login/' + username, {\n      method: 'get'\n    }).then(function (res) {\n      if (res.adminId === username && password === res.adminPw) {\n        localStorage.setItem('username', username); // accept all username/password combinations\n\n        return Promise.resolve();\n      } else {\n        return Promise.reject();\n      }\n    });\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem('username');\n    return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: ({\n    status\n  }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem('username') ? Promise.resolve() : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve()\n};","map":{"version":3,"sources":["C:/Users/이병헌/Desktop/Deep Project/FrontEnd/admin/src/authProvider.js"],"names":["login","username","password","servicesHost","fetch","method","then","res","adminId","adminPw","localStorage","setItem","Promise","resolve","reject","logout","removeItem","checkError","status","checkAuth","getItem","getPermissions"],"mappings":"AACA,eAAe;AACX;AACAA,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA4B;AAC/B,UAAMC,YAAY,GAAG,uBAArB;AACAC,IAAAA,KAAK,CAACD,YAAY,GAAG,SAAf,GAA2BF,QAA5B,EAAqC;AACtCI,MAAAA,MAAM,EAAG;AAD6B,KAArC,CAAL,CAEGC,IAFH,CAEQ,UAASC,GAAT,EAAa;AACjB,UAAGA,GAAG,CAACC,OAAJ,KAAgBP,QAAhB,IAA4BC,QAAQ,KAAKK,GAAG,CAACE,OAAhD,EAAwD;AACpDC,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCV,QAAjC,EADoD,CAEpD;;AACA,eAAOW,OAAO,CAACC,OAAR,EAAP;AACH,OAJD,MAIK;AACD,eAAOD,OAAO,CAACE,MAAR,EAAP;AACH;AACJ,KAVD;AAWH,GAfU;AAgBX;AACAC,EAAAA,MAAM,EAAE,MAAM;AACVL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACA,WAAOJ,OAAO,CAACC,OAAR,EAAP;AACH,GApBU;AAqBX;AACAI,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACxB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCR,MAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACA,aAAOJ,OAAO,CAACE,MAAR,EAAP;AACH;;AACD,WAAOF,OAAO,CAACC,OAAR,EAAP;AACH,GA5BU;AA6BX;AACAM,EAAAA,SAAS,EAAE,MAAM;AACb,WAAOT,YAAY,CAACU,OAAb,CAAqB,UAArB,IACDR,OAAO,CAACC,OAAR,EADC,GAEDD,OAAO,CAACE,MAAR,EAFN;AAGH,GAlCU;AAmCX;AACAO,EAAAA,cAAc,EAAE,MAAMT,OAAO,CAACC,OAAR;AApCX,CAAf","sourcesContent":["\r\nexport default {\r\n    // called when the user attempts to log in\r\n    login: ({ username, password }) => {\r\n        const servicesHost = 'http://localhost:8082';\r\n        fetch(servicesHost + '/login/' + username,{\r\n            method : 'get'\r\n        }).then(function(res){\r\n            if(res.adminId === username && password === res.adminPw){\r\n                localStorage.setItem('username', username);\r\n                // accept all username/password combinations\r\n                return Promise.resolve();\r\n            }else{\r\n                return Promise.reject();\r\n            }\r\n        })\r\n    }, \r\n    // called when the user clicks on the logout button\r\n    logout: () => {\r\n        localStorage.removeItem('username');\r\n        return Promise.resolve();\r\n    },\r\n    // called when the API returns an error\r\n    checkError: ({ status }) => {\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('username');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    // called when the user navigates to a new location, to check for authentication\r\n    checkAuth: () => {\r\n        return localStorage.getItem('username')\r\n            ? Promise.resolve()\r\n            : Promise.reject();\r\n    },\r\n    // called when the user navigates to a new location, to check for permissions / roles\r\n    getPermissions: () => Promise.resolve(),\r\n};"]},"metadata":{},"sourceType":"module"}