{"ast":null,"code":"export default {\n  // called when the user attempts to log in\n  login: ({\n    username,\n    password\n  }) => {\n    if ('master' === username && 'master' === password) {\n      localStorage.setItem('username', username); // accept all username/password combinations\n\n      return Promise.resolve();\n    } else {\n      const servicesHost = 'http://localhost:8082';\n      return fetch(servicesHost + '/login/' + username, {\n        method: 'get'\n      }).then(function (res) {\n        console.log(\"==== run =====\");\n        console.log(res);\n\n        if (res.adminId === username && res.adminPw === password) {\n          localStorage.setItem('username', username); // accept all username/password combinations\n\n          return Promise.resolve();\n        } else {\n          return Promise.reject();\n        }\n      });\n    }\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem('username');\n    return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: ({\n    status\n  }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem('username') ? Promise.resolve() : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve()\n};","map":{"version":3,"sources":["C:/Users/이병헌/Desktop/Deep Project/FrontEnd/admin/src/authProvider.js"],"names":["login","username","password","localStorage","setItem","Promise","resolve","servicesHost","fetch","method","then","res","console","log","adminId","adminPw","reject","logout","removeItem","checkError","status","checkAuth","getItem","getPermissions"],"mappings":"AACA,eAAe;AACX;AACAA,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA4B;AAC/B,QAAG,aAAaD,QAAb,IAAyB,aAAaC,QAAzC,EAAmD;AAC/CC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,QAAjC,EAD+C,CAE/C;;AACA,aAAOI,OAAO,CAACC,OAAR,EAAP;AACH,KAJD,MAIK;AACD,YAAMC,YAAY,GAAG,uBAArB;AACA,aAAOC,KAAK,CAACD,YAAY,GAAG,SAAf,GAA2BN,QAA5B,EAAqC;AAC7CQ,QAAAA,MAAM,EAAG;AADoC,OAArC,CAAL,CAEJC,IAFI,CAEC,UAASC,GAAT,EAAa;AACjBC,QAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;;AACA,YAAGA,GAAG,CAACG,OAAJ,KAAgBb,QAAhB,IAA4BU,GAAG,CAACI,OAAJ,KAAgBb,QAA/C,EAAyD;AACrDC,UAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,QAAjC,EADqD,CAErD;;AACA,iBAAOI,OAAO,CAACC,OAAR,EAAP;AACH,SAJD,MAIK;AACD,iBAAOD,OAAO,CAACW,MAAR,EAAP;AACH;AACJ,OAZM,CAAP;AAaH;AACJ,GAvBU;AAwBX;AACAC,EAAAA,MAAM,EAAE,MAAM;AACVd,IAAAA,YAAY,CAACe,UAAb,CAAwB,UAAxB;AACA,WAAOb,OAAO,CAACC,OAAR,EAAP;AACH,GA5BU;AA6BX;AACAa,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACxB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCjB,MAAAA,YAAY,CAACe,UAAb,CAAwB,UAAxB;AACA,aAAOb,OAAO,CAACW,MAAR,EAAP;AACH;;AACD,WAAOX,OAAO,CAACC,OAAR,EAAP;AACH,GApCU;AAqCX;AACAe,EAAAA,SAAS,EAAE,MAAM;AACb,WAAOlB,YAAY,CAACmB,OAAb,CAAqB,UAArB,IACDjB,OAAO,CAACC,OAAR,EADC,GAEDD,OAAO,CAACW,MAAR,EAFN;AAGH,GA1CU;AA2CX;AACAO,EAAAA,cAAc,EAAE,MAAMlB,OAAO,CAACC,OAAR;AA5CX,CAAf","sourcesContent":["\r\nexport default {\r\n    // called when the user attempts to log in\r\n    login: ({ username, password }) => {\r\n        if('master' === username && 'master' === password ){\r\n            localStorage.setItem('username', username);\r\n            // accept all username/password combinations\r\n            return Promise.resolve();\r\n        }else{\r\n            const servicesHost = 'http://localhost:8082';\r\n            return fetch(servicesHost + '/login/' + username,{\r\n                method : 'get'\r\n            }).then(function(res){\r\n                console.log(\"==== run =====\");\r\n                console.log(res);\r\n                if(res.adminId === username && res.adminPw === password ){\r\n                    localStorage.setItem('username', username);\r\n                    // accept all username/password combinations\r\n                    return Promise.resolve();\r\n                }else{\r\n                    return Promise.reject();\r\n                }\r\n            })\r\n        }\r\n    }, \r\n    // called when the user clicks on the logout button\r\n    logout: () => {\r\n        localStorage.removeItem('username');\r\n        return Promise.resolve();\r\n    },\r\n    // called when the API returns an error\r\n    checkError: ({ status }) => {\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('username');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    // called when the user navigates to a new location, to check for authentication\r\n    checkAuth: () => {\r\n        return localStorage.getItem('username')\r\n            ? Promise.resolve()\r\n            : Promise.reject();\r\n    },\r\n    // called when the user navigates to a new location, to check for permissions / roles\r\n    getPermissions: () => Promise.resolve(),\r\n};"]},"metadata":{},"sourceType":"module"}