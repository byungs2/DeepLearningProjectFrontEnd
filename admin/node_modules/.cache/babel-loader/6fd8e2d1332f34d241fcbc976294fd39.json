{"ast":null,"code":"export default {\n  // called when the user attempts to log in\n  login: ({\n    username,\n    password\n  }) => {\n    // if('byungs2' === username && '1' === password ){\n    //     localStorage.setItem('username', username);\n    //     // accept all username/password combinations\n    //     return Promise.resolve();\n    // }else{\n    //     return Promise.reject();\n    // }\n    console.log(username);\n    console.log(password);\n    const servicesHost = 'http://localhost:8082';\n    fetch(servicesHost + '/login/' + username, {\n      method: 'get'\n    }).then(res => console.log(res));\n  },\n  // called when the user clicks on the logout button\n  logout: () => {\n    localStorage.removeItem('username');\n    return Promise.resolve();\n  },\n  // called when the API returns an error\n  checkError: ({\n    status\n  }) => {\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('username');\n      return Promise.reject();\n    }\n\n    return Promise.resolve();\n  },\n  // called when the user navigates to a new location, to check for authentication\n  checkAuth: () => {\n    return localStorage.getItem('username') ? Promise.resolve() : Promise.reject();\n  },\n  // called when the user navigates to a new location, to check for permissions / roles\n  getPermissions: () => Promise.resolve()\n};","map":{"version":3,"sources":["C:/Users/이병헌/Desktop/Deep Project/FrontEnd/admin/src/authProvider.js"],"names":["login","username","password","console","log","servicesHost","fetch","method","then","res","logout","localStorage","removeItem","Promise","resolve","checkError","status","reject","checkAuth","getItem","getPermissions"],"mappings":"AACA,eAAe;AACX;AACAA,EAAAA,KAAK,EAAE,CAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAD,KAA4B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACA,UAAMG,YAAY,GAAG,uBAArB;AACAC,IAAAA,KAAK,CAACD,YAAY,GAAG,SAAf,GAA2BJ,QAA5B,EAAqC;AACtCM,MAAAA,MAAM,EAAG;AAD6B,KAArC,CAAL,CAEGC,IAFH,CAEQC,GAAG,IAAIN,OAAO,CAACC,GAAR,CAAYK,GAAZ,CAFf;AAGH,GAhBU;AAiBX;AACAC,EAAAA,MAAM,EAAE,MAAM;AACVC,IAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA,WAAOC,OAAO,CAACC,OAAR,EAAP;AACH,GArBU;AAsBX;AACAC,EAAAA,UAAU,EAAE,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAgB;AACxB,QAAIA,MAAM,KAAK,GAAX,IAAkBA,MAAM,KAAK,GAAjC,EAAsC;AAClCL,MAAAA,YAAY,CAACC,UAAb,CAAwB,UAAxB;AACA,aAAOC,OAAO,CAACI,MAAR,EAAP;AACH;;AACD,WAAOJ,OAAO,CAACC,OAAR,EAAP;AACH,GA7BU;AA8BX;AACAI,EAAAA,SAAS,EAAE,MAAM;AACb,WAAOP,YAAY,CAACQ,OAAb,CAAqB,UAArB,IACDN,OAAO,CAACC,OAAR,EADC,GAEDD,OAAO,CAACI,MAAR,EAFN;AAGH,GAnCU;AAoCX;AACAG,EAAAA,cAAc,EAAE,MAAMP,OAAO,CAACC,OAAR;AArCX,CAAf","sourcesContent":["\r\nexport default {\r\n    // called when the user attempts to log in\r\n    login: ({ username, password }) => {\r\n        // if('byungs2' === username && '1' === password ){\r\n        //     localStorage.setItem('username', username);\r\n        //     // accept all username/password combinations\r\n        //     return Promise.resolve();\r\n        // }else{\r\n        //     return Promise.reject();\r\n        // }\r\n        console.log(username);\r\n        console.log(password);\r\n        const servicesHost = 'http://localhost:8082';\r\n        fetch(servicesHost + '/login/' + username,{\r\n            method : 'get'\r\n        }).then(res => console.log(res));\r\n    }, \r\n    // called when the user clicks on the logout button\r\n    logout: () => {\r\n        localStorage.removeItem('username');\r\n        return Promise.resolve();\r\n    },\r\n    // called when the API returns an error\r\n    checkError: ({ status }) => {\r\n        if (status === 401 || status === 403) {\r\n            localStorage.removeItem('username');\r\n            return Promise.reject();\r\n        }\r\n        return Promise.resolve();\r\n    },\r\n    // called when the user navigates to a new location, to check for authentication\r\n    checkAuth: () => {\r\n        return localStorage.getItem('username')\r\n            ? Promise.resolve()\r\n            : Promise.reject();\r\n    },\r\n    // called when the user navigates to a new location, to check for permissions / roles\r\n    getPermissions: () => Promise.resolve(),\r\n};"]},"metadata":{},"sourceType":"module"}